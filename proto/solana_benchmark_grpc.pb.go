// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/solana_benchmark.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BenchmarkService_GetAccountInfo_FullMethodName       = "/solana.benchmark.BenchmarkService/GetAccountInfo"
	BenchmarkService_GetTransaction_FullMethodName       = "/solana.benchmark.BenchmarkService/GetTransaction"
	BenchmarkService_GetBlock_FullMethodName             = "/solana.benchmark.BenchmarkService/GetBlock"
	BenchmarkService_StreamAccountUpdates_FullMethodName = "/solana.benchmark.BenchmarkService/StreamAccountUpdates"
	BenchmarkService_StreamTransactions_FullMethodName   = "/solana.benchmark.BenchmarkService/StreamTransactions"
	BenchmarkService_StreamBlocks_FullMethodName         = "/solana.benchmark.BenchmarkService/StreamBlocks"
	BenchmarkService_RunBenchmark_FullMethodName         = "/solana.benchmark.BenchmarkService/RunBenchmark"
)

// BenchmarkServiceClient is the client API for BenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkServiceClient interface {
	// GetAccountInfo benchmarks retrieving account information
	GetAccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error)
	// GetTransaction benchmarks retrieving transaction information
	GetTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// GetBlock benchmarks retrieving block information
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// StreamAccountUpdates streams account updates in real-time
	StreamAccountUpdates(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamAccountUpdatesClient, error)
	// StreamTransactions streams transactions in real-time
	StreamTransactions(ctx context.Context, in *TransactionStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamTransactionsClient, error)
	// StreamBlocks streams blocks in real-time
	StreamBlocks(ctx context.Context, in *BlockStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamBlocksClient, error)
	// RunBenchmark runs a comprehensive benchmark suite and returns results
	RunBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResults, error)
}

type benchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkServiceClient(cc grpc.ClientConnInterface) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) GetAccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error) {
	out := new(AccountInfoResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_GetAccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) GetTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) StreamAccountUpdates(ctx context.Context, in *AccountStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamAccountUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[0], BenchmarkService_StreamAccountUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceStreamAccountUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_StreamAccountUpdatesClient interface {
	Recv() (*AccountUpdate, error)
	grpc.ClientStream
}

type benchmarkServiceStreamAccountUpdatesClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceStreamAccountUpdatesClient) Recv() (*AccountUpdate, error) {
	m := new(AccountUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkServiceClient) StreamTransactions(ctx context.Context, in *TransactionStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[1], BenchmarkService_StreamTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceStreamTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_StreamTransactionsClient interface {
	Recv() (*TransactionUpdate, error)
	grpc.ClientStream
}

type benchmarkServiceStreamTransactionsClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceStreamTransactionsClient) Recv() (*TransactionUpdate, error) {
	m := new(TransactionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkServiceClient) StreamBlocks(ctx context.Context, in *BlockStreamRequest, opts ...grpc.CallOption) (BenchmarkService_StreamBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[2], BenchmarkService_StreamBlocks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_StreamBlocksClient interface {
	Recv() (*BlockUpdate, error)
	grpc.ClientStream
}

type benchmarkServiceStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceStreamBlocksClient) Recv() (*BlockUpdate, error) {
	m := new(BlockUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkServiceClient) RunBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResults, error) {
	out := new(BenchmarkResults)
	err := c.cc.Invoke(ctx, BenchmarkService_RunBenchmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServiceServer is the server API for BenchmarkService service.
// All implementations must embed UnimplementedBenchmarkServiceServer
// for forward compatibility
type BenchmarkServiceServer interface {
	// GetAccountInfo benchmarks retrieving account information
	GetAccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error)
	// GetTransaction benchmarks retrieving transaction information
	GetTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// GetBlock benchmarks retrieving block information
	GetBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	// StreamAccountUpdates streams account updates in real-time
	StreamAccountUpdates(*AccountStreamRequest, BenchmarkService_StreamAccountUpdatesServer) error
	// StreamTransactions streams transactions in real-time
	StreamTransactions(*TransactionStreamRequest, BenchmarkService_StreamTransactionsServer) error
	// StreamBlocks streams blocks in real-time
	StreamBlocks(*BlockStreamRequest, BenchmarkService_StreamBlocksServer) error
	// RunBenchmark runs a comprehensive benchmark suite and returns results
	RunBenchmark(context.Context, *BenchmarkRequest) (*BenchmarkResults, error)
	mustEmbedUnimplementedBenchmarkServiceServer()
}

// UnimplementedBenchmarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServiceServer struct {
}

func (UnimplementedBenchmarkServiceServer) GetAccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedBenchmarkServiceServer) GetTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedBenchmarkServiceServer) GetBlock(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBenchmarkServiceServer) StreamAccountUpdates(*AccountStreamRequest, BenchmarkService_StreamAccountUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAccountUpdates not implemented")
}
func (UnimplementedBenchmarkServiceServer) StreamTransactions(*TransactionStreamRequest, BenchmarkService_StreamTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransactions not implemented")
}
func (UnimplementedBenchmarkServiceServer) StreamBlocks(*BlockStreamRequest, BenchmarkService_StreamBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedBenchmarkServiceServer) RunBenchmark(context.Context, *BenchmarkRequest) (*BenchmarkResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBenchmark not implemented")
}
func (UnimplementedBenchmarkServiceServer) mustEmbedUnimplementedBenchmarkServiceServer() {}

// UnsafeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServiceServer will
// result in compilation errors.
type UnsafeBenchmarkServiceServer interface {
	mustEmbedUnimplementedBenchmarkServiceServer()
}

func RegisterBenchmarkServiceServer(s grpc.ServiceRegistrar, srv BenchmarkServiceServer) {
	s.RegisterService(&BenchmarkService_ServiceDesc, srv)
}

func _BenchmarkService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).GetAccountInfo(ctx, req.(*AccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).GetTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_StreamAccountUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).StreamAccountUpdates(m, &benchmarkServiceStreamAccountUpdatesServer{stream})
}

type BenchmarkService_StreamAccountUpdatesServer interface {
	Send(*AccountUpdate) error
	grpc.ServerStream
}

type benchmarkServiceStreamAccountUpdatesServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceStreamAccountUpdatesServer) Send(m *AccountUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkService_StreamTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).StreamTransactions(m, &benchmarkServiceStreamTransactionsServer{stream})
}

type BenchmarkService_StreamTransactionsServer interface {
	Send(*TransactionUpdate) error
	grpc.ServerStream
}

type benchmarkServiceStreamTransactionsServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceStreamTransactionsServer) Send(m *TransactionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkService_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).StreamBlocks(m, &benchmarkServiceStreamBlocksServer{stream})
}

type BenchmarkService_StreamBlocksServer interface {
	Send(*BlockUpdate) error
	grpc.ServerStream
}

type benchmarkServiceStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceStreamBlocksServer) Send(m *BlockUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkService_RunBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).RunBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_RunBenchmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).RunBenchmark(ctx, req.(*BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkService_ServiceDesc is the grpc.ServiceDesc for BenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solana.benchmark.BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountInfo",
			Handler:    _BenchmarkService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BenchmarkService_GetTransaction_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BenchmarkService_GetBlock_Handler,
		},
		{
			MethodName: "RunBenchmark",
			Handler:    _BenchmarkService_RunBenchmark_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAccountUpdates",
			Handler:       _BenchmarkService_StreamAccountUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTransactions",
			Handler:       _BenchmarkService_StreamTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBlocks",
			Handler:       _BenchmarkService_StreamBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/solana_benchmark.proto",
}
