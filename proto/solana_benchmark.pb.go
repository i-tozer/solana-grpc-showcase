// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: proto/solana_benchmark.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountInfoRequest represents a request for account information
type AccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey         string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Commitment     string `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
	EncodingBinary bool   `protobuf:"varint,3,opt,name=encoding_binary,json=encodingBinary,proto3" json:"encoding_binary,omitempty"`
}

func (x *AccountInfoRequest) Reset() {
	*x = AccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoRequest) ProtoMessage() {}

func (x *AccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoRequest.ProtoReflect.Descriptor instead.
func (*AccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfoRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountInfoRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

func (x *AccountInfoRequest) GetEncodingBinary() bool {
	if x != nil {
		return x.EncodingBinary
	}
	return false
}

// AccountInfoResponse represents the response with account information
type AccountInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey         string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Data           []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Owner          string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Lamports       uint64 `protobuf:"varint,4,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Executable     bool   `protobuf:"varint,5,opt,name=executable,proto3" json:"executable,omitempty"`
	RentEpoch      uint64 `protobuf:"varint,6,opt,name=rent_epoch,json=rentEpoch,proto3" json:"rent_epoch,omitempty"`
	ResponseTimeMs uint64 `protobuf:"varint,7,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
}

func (x *AccountInfoResponse) Reset() {
	*x = AccountInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoResponse) ProtoMessage() {}

func (x *AccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoResponse.ProtoReflect.Descriptor instead.
func (*AccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *AccountInfoResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountInfoResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccountInfoResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AccountInfoResponse) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *AccountInfoResponse) GetExecutable() bool {
	if x != nil {
		return x.Executable
	}
	return false
}

func (x *AccountInfoResponse) GetRentEpoch() uint64 {
	if x != nil {
		return x.RentEpoch
	}
	return 0
}

func (x *AccountInfoResponse) GetResponseTimeMs() uint64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

// TransactionRequest represents a request for transaction information
type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature  string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Commitment string `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransactionRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

// TransactionResponse represents the response with transaction information
type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature      string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Slot           uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Transaction    []byte `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Success        bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ResponseTimeMs uint64 `protobuf:"varint,5,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransactionResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TransactionResponse) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TransactionResponse) GetResponseTimeMs() uint64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

// BlockRequest represents a request for block information
type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot       uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Commitment string `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{4}
}

func (x *BlockRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

// BlockResponse represents the response with block information
type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot              uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Blockhash         string   `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	PreviousBlockhash string   `protobuf:"bytes,3,opt,name=previous_blockhash,json=previousBlockhash,proto3" json:"previous_blockhash,omitempty"`
	ParentSlot        uint64   `protobuf:"varint,4,opt,name=parent_slot,json=parentSlot,proto3" json:"parent_slot,omitempty"`
	Transactions      []string `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ResponseTimeMs    uint64   `protobuf:"varint,6,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{5}
}

func (x *BlockResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockResponse) GetBlockhash() string {
	if x != nil {
		return x.Blockhash
	}
	return ""
}

func (x *BlockResponse) GetPreviousBlockhash() string {
	if x != nil {
		return x.PreviousBlockhash
	}
	return ""
}

func (x *BlockResponse) GetParentSlot() uint64 {
	if x != nil {
		return x.ParentSlot
	}
	return 0
}

func (x *BlockResponse) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockResponse) GetResponseTimeMs() uint64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

// AccountStreamRequest represents a request to stream account updates
type AccountStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkeys    []string `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	Commitment string   `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *AccountStreamRequest) Reset() {
	*x = AccountStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStreamRequest) ProtoMessage() {}

func (x *AccountStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStreamRequest.ProtoReflect.Descriptor instead.
func (*AccountStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{6}
}

func (x *AccountStreamRequest) GetPubkeys() []string {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *AccountStreamRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

// AccountUpdate represents a real-time account update
type AccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey    string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Owner     string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Lamports  uint64 `protobuf:"varint,4,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Slot      uint64 `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	Timestamp uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AccountUpdate) Reset() {
	*x = AccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUpdate) ProtoMessage() {}

func (x *AccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUpdate.ProtoReflect.Descriptor instead.
func (*AccountUpdate) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{7}
}

func (x *AccountUpdate) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountUpdate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccountUpdate) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AccountUpdate) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *AccountUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *AccountUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// TransactionStreamRequest represents a request to stream transactions
type TransactionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts      []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	IncludeFailed bool     `protobuf:"varint,2,opt,name=include_failed,json=includeFailed,proto3" json:"include_failed,omitempty"`
	Commitment    string   `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *TransactionStreamRequest) Reset() {
	*x = TransactionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStreamRequest) ProtoMessage() {}

func (x *TransactionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStreamRequest.ProtoReflect.Descriptor instead.
func (*TransactionStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *TransactionStreamRequest) GetIncludeFailed() bool {
	if x != nil {
		return x.IncludeFailed
	}
	return false
}

func (x *TransactionStreamRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

// TransactionUpdate represents a real-time transaction update
type TransactionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature   string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Slot        uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Transaction []byte `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Success     bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Timestamp   uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TransactionUpdate) Reset() {
	*x = TransactionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionUpdate) ProtoMessage() {}

func (x *TransactionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionUpdate.ProtoReflect.Descriptor instead.
func (*TransactionUpdate) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionUpdate) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TransactionUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TransactionUpdate) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionUpdate) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TransactionUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// BlockStreamRequest represents a request to stream blocks
type BlockStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment string `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *BlockStreamRequest) Reset() {
	*x = BlockStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStreamRequest) ProtoMessage() {}

func (x *BlockStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStreamRequest.ProtoReflect.Descriptor instead.
func (*BlockStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{10}
}

func (x *BlockStreamRequest) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

// BlockUpdate represents a real-time block update
type BlockUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot              uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Blockhash         string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	PreviousBlockhash string `protobuf:"bytes,3,opt,name=previous_blockhash,json=previousBlockhash,proto3" json:"previous_blockhash,omitempty"`
	ParentSlot        uint64 `protobuf:"varint,4,opt,name=parent_slot,json=parentSlot,proto3" json:"parent_slot,omitempty"`
	Timestamp         uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockUpdate) Reset() {
	*x = BlockUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUpdate) ProtoMessage() {}

func (x *BlockUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUpdate.ProtoReflect.Descriptor instead.
func (*BlockUpdate) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{11}
}

func (x *BlockUpdate) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockUpdate) GetBlockhash() string {
	if x != nil {
		return x.Blockhash
	}
	return ""
}

func (x *BlockUpdate) GetPreviousBlockhash() string {
	if x != nil {
		return x.PreviousBlockhash
	}
	return ""
}

func (x *BlockUpdate) GetParentSlot() uint64 {
	if x != nil {
		return x.ParentSlot
	}
	return 0
}

func (x *BlockUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// BenchmarkRequest represents a request to run a benchmark suite
type BenchmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterations      uint32   `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	TestAccounts    []string `protobuf:"bytes,2,rep,name=test_accounts,json=testAccounts,proto3" json:"test_accounts,omitempty"`
	TestSignatures  []string `protobuf:"bytes,3,rep,name=test_signatures,json=testSignatures,proto3" json:"test_signatures,omitempty"`
	TestSlots       []uint64 `protobuf:"varint,4,rep,packed,name=test_slots,json=testSlots,proto3" json:"test_slots,omitempty"`
	RunGrpcTests    bool     `protobuf:"varint,5,opt,name=run_grpc_tests,json=runGrpcTests,proto3" json:"run_grpc_tests,omitempty"`
	RunJsonrpcTests bool     `protobuf:"varint,6,opt,name=run_jsonrpc_tests,json=runJsonrpcTests,proto3" json:"run_jsonrpc_tests,omitempty"`
	SolanaRpcUrl    string   `protobuf:"bytes,7,opt,name=solana_rpc_url,json=solanaRpcUrl,proto3" json:"solana_rpc_url,omitempty"`
}

func (x *BenchmarkRequest) Reset() {
	*x = BenchmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkRequest) ProtoMessage() {}

func (x *BenchmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkRequest.ProtoReflect.Descriptor instead.
func (*BenchmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{12}
}

func (x *BenchmarkRequest) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *BenchmarkRequest) GetTestAccounts() []string {
	if x != nil {
		return x.TestAccounts
	}
	return nil
}

func (x *BenchmarkRequest) GetTestSignatures() []string {
	if x != nil {
		return x.TestSignatures
	}
	return nil
}

func (x *BenchmarkRequest) GetTestSlots() []uint64 {
	if x != nil {
		return x.TestSlots
	}
	return nil
}

func (x *BenchmarkRequest) GetRunGrpcTests() bool {
	if x != nil {
		return x.RunGrpcTests
	}
	return false
}

func (x *BenchmarkRequest) GetRunJsonrpcTests() bool {
	if x != nil {
		return x.RunJsonrpcTests
	}
	return false
}

func (x *BenchmarkRequest) GetSolanaRpcUrl() string {
	if x != nil {
		return x.SolanaRpcUrl
	}
	return ""
}

// BenchmarkResults represents the results of a benchmark run
type BenchmarkResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account benchmark results
	AccountGrpc    *AccountBenchmark `protobuf:"bytes,1,opt,name=account_grpc,json=accountGrpc,proto3" json:"account_grpc,omitempty"`
	AccountJsonrpc *AccountBenchmark `protobuf:"bytes,2,opt,name=account_jsonrpc,json=accountJsonrpc,proto3" json:"account_jsonrpc,omitempty"`
	// Transaction benchmark results
	TransactionGrpc    *TransactionBenchmark `protobuf:"bytes,3,opt,name=transaction_grpc,json=transactionGrpc,proto3" json:"transaction_grpc,omitempty"`
	TransactionJsonrpc *TransactionBenchmark `protobuf:"bytes,4,opt,name=transaction_jsonrpc,json=transactionJsonrpc,proto3" json:"transaction_jsonrpc,omitempty"`
	// Block benchmark results
	BlockGrpc    *BlockBenchmark `protobuf:"bytes,5,opt,name=block_grpc,json=blockGrpc,proto3" json:"block_grpc,omitempty"`
	BlockJsonrpc *BlockBenchmark `protobuf:"bytes,6,opt,name=block_jsonrpc,json=blockJsonrpc,proto3" json:"block_jsonrpc,omitempty"`
	// Overall benchmark summary
	Summary *BenchmarkSummary `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *BenchmarkResults) Reset() {
	*x = BenchmarkResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResults) ProtoMessage() {}

func (x *BenchmarkResults) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResults.ProtoReflect.Descriptor instead.
func (*BenchmarkResults) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{13}
}

func (x *BenchmarkResults) GetAccountGrpc() *AccountBenchmark {
	if x != nil {
		return x.AccountGrpc
	}
	return nil
}

func (x *BenchmarkResults) GetAccountJsonrpc() *AccountBenchmark {
	if x != nil {
		return x.AccountJsonrpc
	}
	return nil
}

func (x *BenchmarkResults) GetTransactionGrpc() *TransactionBenchmark {
	if x != nil {
		return x.TransactionGrpc
	}
	return nil
}

func (x *BenchmarkResults) GetTransactionJsonrpc() *TransactionBenchmark {
	if x != nil {
		return x.TransactionJsonrpc
	}
	return nil
}

func (x *BenchmarkResults) GetBlockGrpc() *BlockBenchmark {
	if x != nil {
		return x.BlockGrpc
	}
	return nil
}

func (x *BenchmarkResults) GetBlockJsonrpc() *BlockBenchmark {
	if x != nil {
		return x.BlockJsonrpc
	}
	return nil
}

func (x *BenchmarkResults) GetSummary() *BenchmarkSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// AccountBenchmark represents benchmark results for account operations
type AccountBenchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseTimeMs  uint64 `protobuf:"varint,1,opt,name=avg_response_time_ms,json=avgResponseTimeMs,proto3" json:"avg_response_time_ms,omitempty"`
	MinResponseTimeMs  uint64 `protobuf:"varint,2,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	MaxResponseTimeMs  uint64 `protobuf:"varint,3,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	SuccessfulRequests uint32 `protobuf:"varint,4,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	FailedRequests     uint32 `protobuf:"varint,5,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
}

func (x *AccountBenchmark) Reset() {
	*x = AccountBenchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBenchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBenchmark) ProtoMessage() {}

func (x *AccountBenchmark) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBenchmark.ProtoReflect.Descriptor instead.
func (*AccountBenchmark) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{14}
}

func (x *AccountBenchmark) GetAvgResponseTimeMs() uint64 {
	if x != nil {
		return x.AvgResponseTimeMs
	}
	return 0
}

func (x *AccountBenchmark) GetMinResponseTimeMs() uint64 {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return 0
}

func (x *AccountBenchmark) GetMaxResponseTimeMs() uint64 {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return 0
}

func (x *AccountBenchmark) GetSuccessfulRequests() uint32 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *AccountBenchmark) GetFailedRequests() uint32 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

// TransactionBenchmark represents benchmark results for transaction operations
type TransactionBenchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseTimeMs  uint64 `protobuf:"varint,1,opt,name=avg_response_time_ms,json=avgResponseTimeMs,proto3" json:"avg_response_time_ms,omitempty"`
	MinResponseTimeMs  uint64 `protobuf:"varint,2,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	MaxResponseTimeMs  uint64 `protobuf:"varint,3,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	SuccessfulRequests uint32 `protobuf:"varint,4,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	FailedRequests     uint32 `protobuf:"varint,5,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
}

func (x *TransactionBenchmark) Reset() {
	*x = TransactionBenchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBenchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBenchmark) ProtoMessage() {}

func (x *TransactionBenchmark) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBenchmark.ProtoReflect.Descriptor instead.
func (*TransactionBenchmark) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionBenchmark) GetAvgResponseTimeMs() uint64 {
	if x != nil {
		return x.AvgResponseTimeMs
	}
	return 0
}

func (x *TransactionBenchmark) GetMinResponseTimeMs() uint64 {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return 0
}

func (x *TransactionBenchmark) GetMaxResponseTimeMs() uint64 {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return 0
}

func (x *TransactionBenchmark) GetSuccessfulRequests() uint32 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *TransactionBenchmark) GetFailedRequests() uint32 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

// BlockBenchmark represents benchmark results for block operations
type BlockBenchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgResponseTimeMs  uint64 `protobuf:"varint,1,opt,name=avg_response_time_ms,json=avgResponseTimeMs,proto3" json:"avg_response_time_ms,omitempty"`
	MinResponseTimeMs  uint64 `protobuf:"varint,2,opt,name=min_response_time_ms,json=minResponseTimeMs,proto3" json:"min_response_time_ms,omitempty"`
	MaxResponseTimeMs  uint64 `protobuf:"varint,3,opt,name=max_response_time_ms,json=maxResponseTimeMs,proto3" json:"max_response_time_ms,omitempty"`
	SuccessfulRequests uint32 `protobuf:"varint,4,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	FailedRequests     uint32 `protobuf:"varint,5,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
}

func (x *BlockBenchmark) Reset() {
	*x = BlockBenchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBenchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBenchmark) ProtoMessage() {}

func (x *BlockBenchmark) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBenchmark.ProtoReflect.Descriptor instead.
func (*BlockBenchmark) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{16}
}

func (x *BlockBenchmark) GetAvgResponseTimeMs() uint64 {
	if x != nil {
		return x.AvgResponseTimeMs
	}
	return 0
}

func (x *BlockBenchmark) GetMinResponseTimeMs() uint64 {
	if x != nil {
		return x.MinResponseTimeMs
	}
	return 0
}

func (x *BlockBenchmark) GetMaxResponseTimeMs() uint64 {
	if x != nil {
		return x.MaxResponseTimeMs
	}
	return 0
}

func (x *BlockBenchmark) GetSuccessfulRequests() uint32 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *BlockBenchmark) GetFailedRequests() uint32 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

// BenchmarkSummary represents an overall summary of benchmark results
type BenchmarkSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDurationMs      uint64  `protobuf:"varint,1,opt,name=total_duration_ms,json=totalDurationMs,proto3" json:"total_duration_ms,omitempty"`
	GrpcVsJsonrpcSpeedup float64 `protobuf:"fixed64,2,opt,name=grpc_vs_jsonrpc_speedup,json=grpcVsJsonrpcSpeedup,proto3" json:"grpc_vs_jsonrpc_speedup,omitempty"`
	Conclusion           string  `protobuf:"bytes,3,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
}

func (x *BenchmarkSummary) Reset() {
	*x = BenchmarkSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_solana_benchmark_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkSummary) ProtoMessage() {}

func (x *BenchmarkSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_benchmark_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkSummary.ProtoReflect.Descriptor instead.
func (*BenchmarkSummary) Descriptor() ([]byte, []int) {
	return file_proto_solana_benchmark_proto_rawDescGZIP(), []int{17}
}

func (x *BenchmarkSummary) GetTotalDurationMs() uint64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *BenchmarkSummary) GetGrpcVsJsonrpcSpeedup() float64 {
	if x != nil {
		return x.GrpcVsJsonrpcSpeedup
	}
	return 0
}

func (x *BenchmarkSummary) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

var File_proto_solana_benchmark_proto protoreflect.FileDescriptor

var file_proto_solana_benchmark_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x75, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xdc, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x42, 0x0a, 0x0c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdf,
	0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x22, 0x50, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x34, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x97, 0x02, 0x0a, 0x10,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x75, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x75, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52,
	0x70, 0x63, 0x55, 0x72, 0x6c, 0x22, 0x98, 0x04, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70,
	0x63, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x12, 0x51,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x12, 0x57, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x70, 0x63, 0x12, 0x45, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x72,
	0x70, 0x63, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0xff, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x76, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x67, 0x72, 0x70, 0x63,
	0x56, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x98, 0x05, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x32, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x2d, 0x74, 0x6f, 0x7a, 0x65,
	0x72, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_solana_benchmark_proto_rawDescOnce sync.Once
	file_proto_solana_benchmark_proto_rawDescData = file_proto_solana_benchmark_proto_rawDesc
)

func file_proto_solana_benchmark_proto_rawDescGZIP() []byte {
	file_proto_solana_benchmark_proto_rawDescOnce.Do(func() {
		file_proto_solana_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_solana_benchmark_proto_rawDescData)
	})
	return file_proto_solana_benchmark_proto_rawDescData
}

var file_proto_solana_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_solana_benchmark_proto_goTypes = []interface{}{
	(*AccountInfoRequest)(nil),       // 0: solana.benchmark.AccountInfoRequest
	(*AccountInfoResponse)(nil),      // 1: solana.benchmark.AccountInfoResponse
	(*TransactionRequest)(nil),       // 2: solana.benchmark.TransactionRequest
	(*TransactionResponse)(nil),      // 3: solana.benchmark.TransactionResponse
	(*BlockRequest)(nil),             // 4: solana.benchmark.BlockRequest
	(*BlockResponse)(nil),            // 5: solana.benchmark.BlockResponse
	(*AccountStreamRequest)(nil),     // 6: solana.benchmark.AccountStreamRequest
	(*AccountUpdate)(nil),            // 7: solana.benchmark.AccountUpdate
	(*TransactionStreamRequest)(nil), // 8: solana.benchmark.TransactionStreamRequest
	(*TransactionUpdate)(nil),        // 9: solana.benchmark.TransactionUpdate
	(*BlockStreamRequest)(nil),       // 10: solana.benchmark.BlockStreamRequest
	(*BlockUpdate)(nil),              // 11: solana.benchmark.BlockUpdate
	(*BenchmarkRequest)(nil),         // 12: solana.benchmark.BenchmarkRequest
	(*BenchmarkResults)(nil),         // 13: solana.benchmark.BenchmarkResults
	(*AccountBenchmark)(nil),         // 14: solana.benchmark.AccountBenchmark
	(*TransactionBenchmark)(nil),     // 15: solana.benchmark.TransactionBenchmark
	(*BlockBenchmark)(nil),           // 16: solana.benchmark.BlockBenchmark
	(*BenchmarkSummary)(nil),         // 17: solana.benchmark.BenchmarkSummary
}
var file_proto_solana_benchmark_proto_depIdxs = []int32{
	14, // 0: solana.benchmark.BenchmarkResults.account_grpc:type_name -> solana.benchmark.AccountBenchmark
	14, // 1: solana.benchmark.BenchmarkResults.account_jsonrpc:type_name -> solana.benchmark.AccountBenchmark
	15, // 2: solana.benchmark.BenchmarkResults.transaction_grpc:type_name -> solana.benchmark.TransactionBenchmark
	15, // 3: solana.benchmark.BenchmarkResults.transaction_jsonrpc:type_name -> solana.benchmark.TransactionBenchmark
	16, // 4: solana.benchmark.BenchmarkResults.block_grpc:type_name -> solana.benchmark.BlockBenchmark
	16, // 5: solana.benchmark.BenchmarkResults.block_jsonrpc:type_name -> solana.benchmark.BlockBenchmark
	17, // 6: solana.benchmark.BenchmarkResults.summary:type_name -> solana.benchmark.BenchmarkSummary
	0,  // 7: solana.benchmark.BenchmarkService.GetAccountInfo:input_type -> solana.benchmark.AccountInfoRequest
	2,  // 8: solana.benchmark.BenchmarkService.GetTransaction:input_type -> solana.benchmark.TransactionRequest
	4,  // 9: solana.benchmark.BenchmarkService.GetBlock:input_type -> solana.benchmark.BlockRequest
	6,  // 10: solana.benchmark.BenchmarkService.StreamAccountUpdates:input_type -> solana.benchmark.AccountStreamRequest
	8,  // 11: solana.benchmark.BenchmarkService.StreamTransactions:input_type -> solana.benchmark.TransactionStreamRequest
	10, // 12: solana.benchmark.BenchmarkService.StreamBlocks:input_type -> solana.benchmark.BlockStreamRequest
	12, // 13: solana.benchmark.BenchmarkService.RunBenchmark:input_type -> solana.benchmark.BenchmarkRequest
	1,  // 14: solana.benchmark.BenchmarkService.GetAccountInfo:output_type -> solana.benchmark.AccountInfoResponse
	3,  // 15: solana.benchmark.BenchmarkService.GetTransaction:output_type -> solana.benchmark.TransactionResponse
	5,  // 16: solana.benchmark.BenchmarkService.GetBlock:output_type -> solana.benchmark.BlockResponse
	7,  // 17: solana.benchmark.BenchmarkService.StreamAccountUpdates:output_type -> solana.benchmark.AccountUpdate
	9,  // 18: solana.benchmark.BenchmarkService.StreamTransactions:output_type -> solana.benchmark.TransactionUpdate
	11, // 19: solana.benchmark.BenchmarkService.StreamBlocks:output_type -> solana.benchmark.BlockUpdate
	13, // 20: solana.benchmark.BenchmarkService.RunBenchmark:output_type -> solana.benchmark.BenchmarkResults
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_solana_benchmark_proto_init() }
func file_proto_solana_benchmark_proto_init() {
	if File_proto_solana_benchmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_solana_benchmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBenchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBenchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBenchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_solana_benchmark_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_solana_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_solana_benchmark_proto_goTypes,
		DependencyIndexes: file_proto_solana_benchmark_proto_depIdxs,
		MessageInfos:      file_proto_solana_benchmark_proto_msgTypes,
	}.Build()
	File_proto_solana_benchmark_proto = out.File
	file_proto_solana_benchmark_proto_rawDesc = nil
	file_proto_solana_benchmark_proto_goTypes = nil
	file_proto_solana_benchmark_proto_depIdxs = nil
}
